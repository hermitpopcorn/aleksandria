generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            Int       @id @default(autoincrement()) @db.UnsignedInt
  email         String    @unique @db.VarChar(255)
  emailVerified DateTime? @map("email_verified")
  password      String?   @db.VarChar(255)
  name          String?   @db.VarChar(255)
  image         String?   @db.VarChar(255)
  createdAt     DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt     DateTime? @updatedAt @map("updated_at") @db.DateTime(0)

  accounts    Account[]
  sessions    Session[]
  collections Collection[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("user_accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_sessions")
}

model Collection {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  userId    Int       @map("user_id") @db.UnsignedInt
  name      String    @db.VarChar(255)
  type      String?   @db.VarChar(255)
  createdAt DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.DateTime(0)

  user  User   @relation(fields: [userId], references: [id])
  items Item[]

  @@index([userId])
  @@map("collections")
}

model Item {
  id              Int       @id @default(autoincrement()) @db.UnsignedInt
  collectionId    Int       @map("collection_id") @db.UnsignedInt
  type            String?   @db.VarChar(255)
  title           String    @db.VarChar(255)
  titleAlphabetic String?   @db.VarChar(255) @map("title_alphabetic")
  isbn13          String?   @db.VarChar(13)
  cover           String?   @db.VarChar(255)
  note            String?   @db.Text
  copies          Int       @default(1) @db.Int
  createdAt       DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt       DateTime? @updatedAt @map("updated_at") @db.DateTime(0)

  collection Collection @relation(fields: [collectionId], references: [id])

  @@index([collectionId])
  @@index([title])
  @@map("items")
}
